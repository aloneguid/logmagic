using System;
using System.Globalization;

namespace Microsoft.ServiceFabric.Services
{
   /// <summary>Computes CRC64 for a given byte payload.</summary>
   internal static class CRC64
   {
      /// <summary>CRC table.</summary>
      private static readonly ulong[] Crc64Table = new ulong[256]
      {
      0UL,
      4823603603198064275UL,
      9647207206396128550UL,
      14344283933443513269UL,
      5274672035359026399UL,
      847670339082705484UL,
      14759040976900489721UL,
      10241823793177474922UL,
      10549344070718052798UL,
      15030250704074698541UL,
      1695340678165410968UL,
      6158653484774949387UL,
      15804726273676621153UL,
      11071337880091427826UL,
      6824194888265062471UL,
      2036903512645398228UL,
      7367177604490692079UL,
      2651944067726553980UL,
      16419204125234161865UL,
      11613757334439845466UL,
      3390681356330821936UL,
      7926053118503640995UL,
      12317306969549898774UL,
      16726154088988619397UL,
      17607865585094646865UL,
      13162708473643690690UL,
      8194994013375312247UL,
      3695931686473304036UL,
      13648389776530124942UL,
      18417527692557321757UL,
      4073807025290796456UL,
      8825348881154370363UL,
      14734355208981384158UL,
      10271039580541631821UL,
      5303888135453107960UL,
      822984195088142443UL,
      9604374506261047041UL,
      14391664176758772114UL,
      47380625301539367UL,
      4780770595170139316UL,
      6781362712661643872UL,
      2084283301222999283UL,
      15852106237007281990UL,
      11028505464239851989UL,
      1670654249350217407UL,
      6187869865390245932UL,
      10578560694269006745UL,
      15005564104267687178UL,
      12269926345859042865UL,
      16768987096479742114UL,
      3433514057002836759UL,
      7878672873577829764UL,
      16389988026750624494UL,
      11638443477897467005UL,
      7391863372946608072UL,
      2622728278751721819UL,
      4044590402276644751UL,
      8850035479350698268UL,
      13673076206955870889UL,
      18388311311405091898UL,
      8147614050581592912UL,
      3738764100714335683UL,
      17650697762308740726UL,
      13115328684529279205UL,
      15709965168302367023UL,
      11021966344253216700UL,
      6909860770376862729UL,
      2095335087373712026UL,
      10607776270906215920UL,
      15115916238825782115UL,
      1645968390176284886UL,
      6063892853452478021UL,
      5216239979862816913UL,
      762004938812542466UL,
      14808413130408695223UL,
      10336584279807992612UL,
      94761250603078734UL,
      4872975272980325085UL,
      9561541190340278632UL,
      14285852213486374907UL,
      13562725425323287744UL,
      18359094313119879763UL,
      4168566602445998566UL,
      8874722219015798645UL,
      17657238303940757535UL,
      13257468400305012364UL,
      8136561383943382329UL,
      3610266854770152362UL,
      3341308498700434814UL,
      7831293060043656173UL,
      12375739730780491864UL,
      16811819059476047563UL,
      7452841817450123681UL,
      2710377314828461874UL,
      16324444680414493831UL,
      11564384134825822740UL,
      1621282580641819377UL,
      6093108618008534114UL,
      10636992411005044695UL,
      15091230119249932612UL,
      6867028114005673518UL,
      2142715359940571325UL,
      15757345747155659528UL,
      10979133309658045851UL,
      9518708972583580495UL,
      14333231979791697372UL,
      142141253402664553UL,
      4830142882085382394UL,
      14783726745893216144UL,
      10365800689136969987UL,
      5245456557503443638UL,
      737318311902463013UL,
      8089180804553289502UL,
      3653099890976004493UL,
      17700070958701396536UL,
      13210088128275084459UL,
      4139350461810230209UL,
      8899408340202190162UL,
      13587411233247080167UL,
      18329878549100632180UL,
      16295228101163185824UL,
      11589070762272702515UL,
      7477528201428671366UL,
      2681160907110034709UL,
      12328359726370364031UL,
      16854651450907929836UL,
      3384140715920324441UL,
      7783913295349006794UL,
      17796789492404876493UL,
      12973186262895182430UL,
      8294265019745835499UL,
      3597188614796881784UL,
      13819721540753725458UL,
      18246723593521770113UL,
      4190670174747424052UL,
      8707887697765516199UL,
      7249714899603402099UL,
      2768808468102880224UL,
      16248400991498780757UL,
      11785088403942012614UL,
      3291936780352569772UL,
      8025325358597240639UL,
      12127785706904956042UL,
      16915077318774037017UL,
      10432479959725633826UL,
      15147713122803500977UL,
      1524009877625084932UL,
      6329456346323069591UL,
      15705454305770282493UL,
      11170082187107838830UL,
      6635271944638132443UL,
      2226424485906433608UL,
      189522501206157468UL,
      4634679410803088911UL,
      9745950545960650170UL,
      14245012653811987241UL,
      5445476407655580739UL,
      676338306971005648UL,
      14876502445374089573UL,
      10124960353263198198UL,
      4215391513593610003UL,
      8678706776937023872UL,
      13790540925671641653UL,
      18271444552530207910UL,
      8337133204891997132UL,
      3549843186494580063UL,
      17749444438031597290UL,
      13016054137459951737UL,
      12170653315997410989UL,
      16867732534171963454UL,
      3244592164593781643UL,
      8068192726900473112UL,
      16273122767886764658UL,
      11755906975779290337UL,
      7220533709540304724UL,
      2793530071884239303UL,
      6682616997400869628UL,
      2183556611878603887UL,
      15662586120087312346UL,
      11217427617020813641UL,
      1553190491096487459UL,
      6304735387851432112UL,
      10407758620342516485UL,
      15176894045242543510UL,
      14905683634900247362UL,
      10100238751092381137UL,
      5420754629656923748UL,
      705519735670536439UL,
      9793295161182637981UL,
      14202145287119436046UL,
      146654890503152315UL,
      4682024195942093864UL,
      3242565161283638754UL,
      7930564333232481137UL,
      12186217236017068228UL,
      17000743249723264599UL,
      7335380351123765565UL,
      2827240748300537774UL,
      16153640314560107547UL,
      11735716164790313608UL,
      13734056228011347036UL,
      18188291445129067215UL,
      4285430719881142650UL,
      8757259798139230185UL,
      17846161249714921603UL,
      13067947420601767440UL,
      8235833358291897765UL,
      3511522545606540086UL,
      5387043107155988493UL,
      590673871457609374UL,
      14925875833148783915UL,
      10219719885873843128UL,
      284282506805329106UL,
      4684052045342640705UL,
      9660285764170764788UL,
      14186579979835500391UL,
      15610694155489642931UL,
      11120709418076880672UL,
      6720936860919424149UL,
      2284857304564388358UL,
      10490913115006887276UL,
      15233377424362361855UL,
      1474636623804926026UL,
      6234696958930763481UL,
      16178361609106579004UL,
      11706535215248140463UL,
      7306199781952008986UL,
      2851961734412043657UL,
      12229085463316509411UL,
      16953397843693241456UL,
      3195220067441434565UL,
      7973432182840617302UL,
      8278700923620460418UL,
      3464177731752866065UL,
      17798816680404380324UL,
      13110814815472245815UL,
      4310152537884486493UL,
      8728078392784608718UL,
      13704874997943502459UL,
      18213013024491712744UL,
      9707630858549910483UL,
      14143712128616820032UL,
      241414281116563189UL,
      4731397450835853414UL,
      14955056402857342732UL,
      10194998898151653791UL,
      5362321814220069418UL,
      619854820462849209UL,
      1503817855483314797UL,
      6209975379031176446UL,
      10466191297540353867UL,
      15262558828106308056UL,
      6768281431840648882UL,
      2241989909157107745UL,
      15567826590698013588UL,
      11168054230320002311UL
      };

      /// <summary>Returns the CRC64 for the given payload.</summary>
      /// <param name="value">Byte payload.</param>
      /// <returns>CRC64 value.</returns>
      public static ulong ToCRC64(byte[] value)
      {
         ulong num1 = ulong.MaxValue;
         for (int index = 0; index < value.Length; ++index)
         {
            uint num2 = (uint)(((int)(uint)(num1 >> 56) ^ (int)value[index]) & (int)byte.MaxValue);
            num1 = CRC64.Crc64Table[(int)num2] ^ num1 << 8;
         }
         return num1 ^ ulong.MaxValue;
      }

      /// <summary>Returns the CRC64 for the given payload.</summary>
      /// <param name="values">Byte payloads.</param>
      /// <returns>CRC64 value.</returns>
      public static ulong ToCRC64(params byte[][] values)
      {
         ulong num1 = ulong.MaxValue;
         for (int index1 = 0; index1 < values.Length; ++index1)
         {
            for (int index2 = 0; index2 < values[index1].Length; ++index2)
            {
               uint num2 = (uint)(((int)(uint)(num1 >> 56) ^ (int)values[index1][index2]) & (int)byte.MaxValue);
               num1 = CRC64.Crc64Table[(int)num2] ^ num1 << 8;
            }
         }
         return num1 ^ ulong.MaxValue;
      }

      /// <summary>
      /// Returns the CRC64 in string form for the given payload.
      /// </summary>
      /// <param name="value">Byte payload.</param>
      /// <returns>CRC64 value.</returns>
      public static string ToCrc64String(byte[] value)
      {
         return CRC64.ToCRC64(value).ToString("X", (IFormatProvider)CultureInfo.InvariantCulture);
      }
   }
}
